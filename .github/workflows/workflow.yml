name: Integer Version Bump, Release & Zip Asset

on:
  push:
    paths:
      - 'tuxedo-fnlock-status@stevenseifried.github.io/extension.js'

permissions:
  contents: write

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Bump integer version in metadata.json
        id: bump_version
        run: |
          FILE="tuxedo-fnlock-status@stevenseifried.github.io/metadata.json"
          CUR_VER=$(grep -oE '"version"[[:space:]]*:[[:space:]]*[0-9]+' "$FILE" | grep -oE '[0-9]+')
          if [ -z "$CUR_VER" ]; then
            echo "Could not find version number!"
            exit 1
          fi
          NEW_VER=$((CUR_VER + 1))
          sed -i "s/\"version\"[[:space:]]*:[[:space:]]*$CUR_VER/\"version\": $NEW_VER/" "$FILE"
          echo "Bumped version: $CUR_VER -> $NEW_VER"
          echo "new_version=$NEW_VER" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        run: |
          git config --global user.name 'Steven Seifried'
          git config --global user.email 'gitlab@canox.net'
          git add tuxedo-fnlock-status@stevenseifried.github.io/metadata.json
          git commit -m "chore: bump version to ${{ steps.bump_version.outputs.new_version }} [skip ci]" || echo "No changes to commit"
          git push

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get last release tag
        id: get_last_tag
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT

      - name: Get commits since last release
        id: get_commits
        run: |
          if [ -z "${{ steps.get_last_tag.outputs.last_tag }}" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)")
          else
            COMMITS=$(git log ${{ steps.get_last_tag.outputs.last_tag }}..HEAD --pretty=format:"- %s (%h)")
          fi
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create zip file for release
        run: |
          cd tuxedo-fnlock-status@stevenseifried.github.io
          zip -r ../tuxedo-fnlock-status@stevenseifried.github.io.zip extension.js icons metadata.json schemas
          cd ..

      - name: Import GPG key and configure git signing
        env:
          GPGKEY: ${{ secrets.GPGKEY }}
        run: |
          echo "$GPGKEY" | base64 --decode | gpg --batch --import
          KEYID=$(gpg --list-secret-keys --with-colons | grep '^sec' | cut -d: -f5 | head -n1)
          echo "Using GPG Key: $KEYID"
          git config --global user.signingkey "$KEYID"
          git config --global gpg.program gpg
          git config --global tag.gpgSign true
          export GPG_TTY=$(tty)

      - name: Create signed tag for new version
        run: |
          TAG="v${{ steps.bump_version.outputs.new_version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists, skipping creation."
          else
            git tag -s "$TAG" -m "Release $TAG"
            git push origin "$TAG"
            echo "Signed tag $TAG created and pushed."
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          name: TUXEDO FnLock status v${{ steps.bump_version.outputs.new_version }}
          body: |
            Automatic release for TUXEDO FnLock status v${{ steps.bump_version.outputs.new_version }}.

            Commits since last release:
            ${{ steps.get_commits.outputs.commits }}
          files: tuxedo-fnlock-status@stevenseifried.github.io.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
